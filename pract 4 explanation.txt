ðŸ“Œ 1. Importing Required Libraries
python
Copy code
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
pandas: For data loading and manipulation.

numpy: For numerical operations (not explicitly used here but often needed).

sklearn.linear_model.LinearRegression: Class to create the linear regression model.

sklearn.model_selection.train_test_split: Function to split the dataset into training and testing sets.

sklearn.metrics: For evaluating the performance of the model.

ðŸ“Œ 2. Load the Dataset
python
Copy code
df = pd.read_csv(url)
print("Dataset Preview:\n", df.head())
df = pd.read_csv(url): Reads the dataset from a given URL or file path into a DataFrame.

df.head(): Displays the first 5 rows of the dataset for a quick preview.

ðŸ“Œ 3. Define Features and Target
python
Copy code
X = df.drop('medv', axis=1)
y = df['medv']
X: Independent variables (all columns except medv).

y: Dependent variable (house price), often medv in the Boston dataset.

ðŸ“Œ 4. Split the Dataset
python
Copy code
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
Splits the dataset into 80% training and 20% testing data.

random_state=0: Ensures reproducibility (same split every time you run it).

ðŸ“Œ 5. Train the Model
python
Copy code
model = LinearRegression()
model.fit(X_train, y_train)
model = LinearRegression(): Initializes the model.

model.fit(...): Trains the model on the training data.

ðŸ“Œ 6. Make Predictions
python
Copy code
y_pred = model.predict(X_test)
Predicts house prices using the trained model on test data.

ðŸ“Œ 7. Evaluate the Model
python
Copy code
print("\nModel Coefficients:\n", model.coef_)
print("\nIntercept:", model.intercept_)
print("\nMean Squared Error (MSE):", mean_squared_error(y_test, y_pred))
print("RÂ² Score:", r2_score(y_test, y_pred))
model.coef_: Coefficients (weights) for each feature.

model.intercept_: The y-intercept of the model.

mean_squared_error(...): Measures average squared difference between actual and predicted values (lower is better).

r2_score(...): Explains how much variance in the target is explained by the model (ranges from 0 to 1; closer to 1 is better).